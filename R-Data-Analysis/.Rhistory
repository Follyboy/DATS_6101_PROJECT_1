table(up_sample_data$Class)# by default the name of dependent variable is changed to class.
colnames(up_sample_data)[14] <- "stroke"
str(up_sample_data)
contable_gender = table(up_sample_data$gender, up_sample_data$stroke)
contable_gender = table(up_sample_data$gender, up_sample_data$stroke)
contable_age = table(up_sample_data$age, up_sample_data$stroke)
contable_hypertension = table(up_sample_data$hypertension, up_sample_data$stroke)
contable_heart_disease = table(up_sample_data$heart_disease, up_sample_data$stroke)
contable_ever_married = table(up_sample_data$ever_married, up_sample_data$stroke)
contable_work_type = table(up_sample_data$work_type, up_sample_data$stroke)
contable_Residence_type = table(up_sample_data$Residence_type, up_sample_data$stroke)
contable_avg_glucose_level = table(up_sample_data$avg_glucose_level, up_sample_data$stroke)
contable_bmi = table(up_sample_data$bmi, up_sample_data$stroke)
contable_smoking_status = table(up_sample_data$smoking_status, up_sample_data$stroke)
chitest_gender = chisq.test(contable_gender)
chitest_age = chisq.test(contable_age)
chitest_hypertension = chisq.test(contable_hypertension)
chitest_heart_disease = chisq.test(contable_heart_disease)
chitest_ever_married = chisq.test(contable_ever_married)
chitest_work_type = chisq.test(contable_work_type)
chitest_Residence_type = chisq.test(contable_Residence_type)
chitest_avg_glucose_level = chisq.test(contable_avg_glucose_level)
chitest_bmi = chisq.test(contable_bmi)
chitest_smoking_status = chisq.test(contable_smoking_status)
chitest_gender
chitest_age
chitest_hypertension
chitest_heart_disease
chitest_ever_married
chitest_work_type
chitest_Residence_type
chitest_avg_glucose_level
chitest_bmi
chitest_smoking_status
remotes::install_github("cran/DMwR")
#remotes::install_github("cran/DMwR")
library(DMwR)
table(data_no_outlier$stroke)
#use SMOTE to create new dataset that is more balanced
balanced_df <- SMOTE(stroke ~ ., data_no_outlier, perc.over = 2000, perc.under = 200)
#minority => 2000/100 =20 so 20*(strok1Observations=416) #upsampling
#200/100 =2, make the majority observation 2 time the minority observations #downsampling
#view distribution of response variable in new dataset
table(balanced_df$stroke)
contable_gender = table(balanced_df$gender, balanced_df$stroke)
contable_age = table(balanced_df$age, balanced_df$stroke)
contable_hypertension = table(balanced_df$hypertension, balanced_df$stroke)
contable_heart_disease = table(balanced_df$heart_disease, balanced_df$stroke)
contable_ever_married = table(balanced_df$ever_married, balanced_df$stroke)
contable_work_type = table(balanced_df$work_type, balanced_df$stroke)
contable_Residence_type = table(balanced_df$Residence_type, balanced_df$stroke)
contable_avg_glucose_level = table(balanced_df$avg_glucose_level, balanced_df$stroke)
contable_bmi = table(balanced_df$bmi, balanced_df$stroke)
contable_smoking_status = table(balanced_df$smoking_status, balanced_df$stroke)
chitest_gender = chisq.test(contable_gender)
chitest_age = chisq.test(contable_age)
chitest_hypertension = chisq.test(contable_hypertension)
chitest_heart_disease = chisq.test(contable_heart_disease)
chitest_ever_married = chisq.test(contable_ever_married)
chitest_work_type = chisq.test(contable_work_type)
chitest_Residence_type = chisq.test(contable_Residence_type)
chitest_avg_glucose_level = chisq.test(contable_avg_glucose_level)
chitest_bmi = chisq.test(contable_bmi)
chitest_smoking_status = chisq.test(contable_smoking_status)
chitest_gender
chitest_age
chitest_hypertension
chitest_heart_disease
chitest_ever_married
chitest_work_type
chitest_Residence_type
chitest_avg_glucose_level
chitest_bmi
chitest_smoking_status
chisquare_for_dataset <- function(df) {     # defined a function to call chisquare test on different datasets.
contable_gender = table(df$gender, df$stroke)
contable_age = table(df$age, df$stroke)
contable_hypertension = table(df$hypertension, df$stroke)
contable_heart_disease = table(df$heart_disease, df$stroke)
contable_ever_married = table(df$ever_married, df$stroke)
contable_work_type = table(df$work_type, df$stroke)
contable_Residence_type = table(df$Residence_type, df$stroke)
contable_avg_glucose_level = table(df$avg_glucose_level, df$stroke)
contable_bmi = table(df$bmi, df$stroke)
contable_smoking_status = table(df$smoking_status, df$stroke)
chitest_gender = chisq.test(contable_gender)
chitest_age = chisq.test(contable_age)
chitest_hypertension = chisq.test(contable_hypertension)
chitest_heart_disease = chisq.test(contable_heart_disease)
chitest_ever_married = chisq.test(contable_ever_married)
chitest_work_type = chisq.test(contable_work_type)
chitest_Residence_type = chisq.test(contable_Residence_type)
chitest_avg_glucose_level = chisq.test(contable_avg_glucose_level)
chitest_bmi = chisq.test(contable_bmi)
chitest_smoking_status = chisq.test(contable_smoking_status)
chitest_gender
chitest_age
chitest_hypertension
chitest_heart_disease
chitest_ever_married
chitest_work_type
chitest_Residence_type
chitest_avg_glucose_level
chitest_bmi
chitest_smoking_status
}
#install.packages("caret") #for upsample function we need this library
# after installing this library, I faced an error with rlang version. So simply uninstall rlang and reinstall
# remove.packages("rlang")
#install.packages("rlang")
library("caret")
up_sample_data = upSample(x=data_no_outlier[,-11], y=data_no_outlier$stroke)
table(up_sample_data$Class)# by default the name of dependent variable is changed to class.
colnames(up_sample_data)[14] <- "stroke"
str(up_sample_data)
chisquare_for_dataset <- function(df) {     # defined a function to call chisquare test on different datasets.
contable_gender = table(df$gender, df$stroke)
contable_age = table(df$age, df$stroke)
contable_hypertension = table(df$hypertension, df$stroke)
contable_heart_disease = table(df$heart_disease, df$stroke)
contable_ever_married = table(df$ever_married, df$stroke)
contable_work_type = table(df$work_type, df$stroke)
contable_Residence_type = table(df$Residence_type, df$stroke)
contable_avg_glucose_level = table(df$avg_glucose_level, df$stroke)
contable_bmi = table(df$bmi, df$stroke)
contable_smoking_status = table(df$smoking_status, df$stroke)
chitest_gender = chisq.test(contable_gender)
chitest_age = chisq.test(contable_age)
chitest_hypertension = chisq.test(contable_hypertension)
chitest_heart_disease = chisq.test(contable_heart_disease)
chitest_ever_married = chisq.test(contable_ever_married)
chitest_work_type = chisq.test(contable_work_type)
chitest_Residence_type = chisq.test(contable_Residence_type)
chitest_avg_glucose_level = chisq.test(contable_avg_glucose_level)
chitest_bmi = chisq.test(contable_bmi)
chitest_smoking_status = chisq.test(contable_smoking_status)
chitest_gender
chitest_age
chitest_hypertension
chitest_heart_disease
chitest_ever_married
chitest_work_type
chitest_Residence_type
chitest_avg_glucose_level
chitest_bmi
chitest_smoking_status
}
chisquare_for_dataset(up_sample_data)
chisquare_for_dataset <- function(df) {     # defined a function to call chisquare test on different datasets.
contable_gender = table(df$gender, df$stroke)
contable_age = table(df$age, df$stroke)
contable_hypertension = table(df$hypertension, df$stroke)
contable_heart_disease = table(df$heart_disease, df$stroke)
contable_ever_married = table(df$ever_married, df$stroke)
contable_work_type = table(df$work_type, df$stroke)
contable_Residence_type = table(df$Residence_type, df$stroke)
contable_avg_glucose_level = table(df$avg_glucose_level, df$stroke)
contable_bmi = table(df$bmi, df$stroke)
contable_smoking_status = table(df$smoking_status, df$stroke)
chitest_gender = chisq.test(contable_gender)
chitest_age = chisq.test(contable_age)
chitest_hypertension = chisq.test(contable_hypertension)
chitest_heart_disease = chisq.test(contable_heart_disease)
chitest_ever_married = chisq.test(contable_ever_married)
chitest_work_type = chisq.test(contable_work_type)
chitest_Residence_type = chisq.test(contable_Residence_type)
chitest_avg_glucose_level = chisq.test(contable_avg_glucose_level)
chitest_bmi = chisq.test(contable_bmi)
chitest_smoking_status = chisq.test(contable_smoking_status)
print(chitest_gender)
chitest_age
chitest_hypertension
chitest_heart_disease
chitest_ever_married
chitest_work_type
chitest_Residence_type
chitest_avg_glucose_level
chitest_bmi
chitest_smoking_status
}
chisquare_for_dataset(up_sample_data)
chisquare_for_dataset <- function(df) {     # defined a function to call chisquare test on different datasets.
contable_gender = table(df$gender, df$stroke)
contable_age = table(df$age, df$stroke)
contable_hypertension = table(df$hypertension, df$stroke)
contable_heart_disease = table(df$heart_disease, df$stroke)
contable_ever_married = table(df$ever_married, df$stroke)
contable_work_type = table(df$work_type, df$stroke)
contable_Residence_type = table(df$Residence_type, df$stroke)
contable_avg_glucose_level = table(df$avg_glucose_level, df$stroke)
contable_bmi = table(df$bmi, df$stroke)
contable_smoking_status = table(df$smoking_status, df$stroke)
chitest_gender = chisq.test(contable_gender)
chitest_age = chisq.test(contable_age)
chitest_hypertension = chisq.test(contable_hypertension)
chitest_heart_disease = chisq.test(contable_heart_disease)
chitest_ever_married = chisq.test(contable_ever_married)
chitest_work_type = chisq.test(contable_work_type)
chitest_Residence_type = chisq.test(contable_Residence_type)
chitest_avg_glucose_level = chisq.test(contable_avg_glucose_level)
chitest_bmi = chisq.test(contable_bmi)
chitest_smoking_status = chisq.test(contable_smoking_status)
print(chitest_gender)
print(chitest_age)
print(chitest_hypertension)
print(chitest_heart_disease)
print(chitest_ever_married)
print(chitest_work_type)
print(chitest_Residence_type)
print(chitest_avg_glucose_level)
print(chitest_bmi)
print(chitest_smoking_status)
}
chisquare_for_dataset(up_sample_data)
print("For up sampled dataset")
chisquare_for_dataset(up_sample_data)
#remotes::install_github("cran/DMwR")
library(DMwR)
table(data_no_outlier$stroke)
#use SMOTE to create new dataset that is more balanced
balanced_df <- SMOTE(stroke ~ ., data_no_outlier, perc.over = 2000, perc.under = 200)
#minority => 2000/100 =20 so 20*(strok1Observations=416) #upsampling
#200/100 =2, make the majority observation 2 time the minority observations #downsampling
#view distribution of response variable in new dataset
table(balanced_df$stroke)
print("For SMOTE upsampled dataset")
chisquare_for_dataset(balanced_df)
stroke_age_aov = aov(stroke~age, data = balanced_df)
#gstroke_aov = aov(gpa~rank, data = Adata2)
stroke_age_aov = aov(age~stroke, data = balanced_df)
#gstroke_aov = aov(gpa~rank, data = Adata2)
stroke_age_aov = aov(age~stroke, data = balanced_df)
#gstroke_aov = aov(gpa~rank, data = Adata2)
stroke_age_aov = aov(age~stroke, data = balanced_df)
stroke_age_aov
#gstroke_aov = aov(gpa~rank, data = Adata2)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
Adata = read.csv("LogRegAdmit.csv")
Adata$admit = as.factor(Adata$admit)
Adata$rank = as.factor(Adata$rank)
str(Adata)
Adatagre = outlierKD2(Adata,gre, rm=TRUE)
Adata2 = outlierKD2(Adatagre,gpa, rm=TRUE)
summary(Adata2)
greNA = subset(Adata2, is.na(Adata2$gre))
gpaNA = subset(Adata2, is.na(Adata2$gpa))
AdataAdmit = subset(Adata2, Adata$admit == 1)
AdataReject = subset(Adata2, Adata$admit == 0)
str(AdataAdmit)
str(AdataReject)
library(ggplot2)
ggplot(data=AdataAdmit, aes(gre)) +
geom_histogram(col="black",
fill="blue") +
labs(x="gre", y="frequency") +
labs(title="Histogram of GRE Scores for admitted students")
ggplot(data=AdataReject, aes(gre)) +
geom_histogram(col="black",
fill="green") +
labs(x="gre", y="frequency") +
labs(title="Histogram of GRE Scores for rejected students")
ggplot(data=AdataAdmit, aes(gpa)) +
geom_histogram(col="black",
fill="blue") +
labs(x="gpa", y="frequency") +
labs(title="Histogram of GPA Scores for admitted students")
ggplot(data=AdataReject, aes(gpa)) +
geom_histogram(col="black",
fill="green") +
labs(x="gpa", y="frequency") +
labs(title="Histogram of GPA Scores for rejected students")
qqnorm(AdataAdmit$gre, main="Q-Q plot of GRE scores for admitted students", col="blue", ylab="GRE score quantiles")
qqline(AdataAdmit$gre)
qqnorm(AdataReject$gre, main="Q-Q plot of GRE scores for rejected students", col="blue", ylab="GRE score quantiles")
qqline(AdataReject$gre)
qqnorm(AdataAdmit$gpa, main="Q-Q plot of GPA scores for admitted students", col="green", ylab="GPA score quantiles")
qqline(AdataAdmit$gpa)
qqnorm(AdataReject$gpa, main="Q-Q plot of GPA scores for rejected students", col="green", ylab="GPA score quantiles")
qqline(AdataReject$gpa)
ttest2sample_gre = t.test(AdataAdmit$gre,AdataReject$gre)
ttest2sample_gre
ttest2sample_gpa = t.test(AdataAdmit$gpa,AdataReject$gpa)
ttest2sample_gpa
contable = table(Adata2$admit, Adata2$rank)
xkabledply(contable, title="Contingency table for admit vs rank in Adata2")
chitest1 = chisq.test(contable)
chitest1
pchisq(chitest1$statistic, chitest1$parameter, lower.tail=F)
gre_rank_aov = aov(gre~rank, data = Adata2)
gpa_rank_aov = aov(gpa~rank, data = Adata2)
names(gre_rank_aov)
xkabledply(gre_rank_aov)
xkabledply(gpa_rank_aov)
stroke_age_aov = aov(age~stroke, data = balanced_df)
xkabledply(stroke_age_aov)
#gstroke_aov = aov(gpa~rank, data = Adata2)
stroke_age_aov = aov(age~gender, data = balanced_df)
xkabledply(stroke_age_aov)
#gstroke_aov = aov(gpa~rank, data = Adata2)
stroke_age_aov = aov(age~stroke, data = balanced_df)
xkabledply(stroke_age_aov)
#gstroke_aov = aov(gpa~rank, data = Adata2)
stroke_age_aov = aov(bmi~stroke, data = balanced_df)
xkabledply(stroke_age_aov)
#gstroke_aov = aov(gpa~rank, data = Adata2)
stroke_age_aov = aov(avg_glucose_level~stroke, data = balanced_df)
xkabledply(stroke_age_aov)
#gstroke_aov = aov(gpa~rank, data = Adata2)
knitr::opts_chunk$set(echo = TRUE)
#install packages
#remotes::install_github("cran/DMwR")
#import libraries all
#library(DMwR)
#importing brain dataset
data <- data.frame(read.csv("dataset.csv"))
#checking the structure of our dataset
str(data)
#since ID won't be useful during prediction so removing that
brainData <- select(data, -c('id'))
#checking top5 entries in our dataset
head(brainData)
summary(brainData)
#Converting gender,hypertension,heart_disease,ever_married,work_type,Residence_type,smoking_status,stroke to factors
brainData$gender = factor(brainData$gender)
brainData$hypertension = factor(brainData$hypertension)
brainData$heart_disease = factor(brainData$heart_disease)
brainData$ever_married = factor(brainData$ever_married)
brainData$work_type = factor(brainData$work_type)
brainData$Residence_type = factor(brainData$Residence_type)
brainData$smoking_status = factor(brainData$smoking_status)
brainData$stroke = factor(brainData$stroke)
str(brainData)
summary(brainData)
cleanData = brainData
cleanData[cleanData == ''] <- NA
nrow(cleanData)
cleanData <- subset(cleanData, !is.na(smoking_status))
nrow(cleanData)
#removing missing values for BMI
cleanData$bmi[is.na(cleanData$bmi)] <- median(cleanData$bmi, na.rm = T) #replacing NA values with median of the remaining bmi values.
summary(cleanData)
dim(cleanData)
quartiles_bmi <- quantile(cleanData$bmi, probs=c(.25, .75), na.rm = FALSE)
IQR_bmi <- IQR(cleanData$bmi)
Lower_bmi <- quartiles_bmi[1] - 1.5*IQR_bmi
Upper_bmi <- quartiles_bmi[2] + 1.5*IQR_bmi
#since all the missing values are for stroke =0 entries, we will directly drop it
cleanData <- subset(cleanData, cleanData$bmi > Lower_bmi & cleanData$bmi < Upper_bmi)
dim(cleanData)
dim(cleanData)
quartiles_glucose <- quantile(cleanData$avg_glucose_level, probs=c(.25, .75), na.rm = FALSE)
IQR_glucose <- IQR(cleanData$avg_glucose_level)
Lower_glucose <- quartiles[1] - 1.5*IQR
Upper_glucose <- quartiles[2] + 1.5*IQR
#since all the missing values are for stroke =0 entries, we will directly drop it
cleanData <- subset(cleanData, cleanData$avg_glucose_level > Lower_glucose & cleanData$avg_glucose_level < Upper_glucose)
dim(cleanData)
table(cleanData$stroke)
#use SMOTE to create new dataset that is more balanced
cleanData <- SMOTE(stroke ~ ., cleanData, perc.over = 2000, perc.under = 200)
#minority => 2000/100 =20 so 20*(strok1Observations=416) #upsampling
#200/100 =2, make the majority observation 2 time the minority observations #downsampling
#view distribution of response variable in new dataset
table(cleanData$stroke)
knitr::opts_chunk$set(echo = TRUE)
#install packages
#remotes::install_github("cran/DMwR")
library(ggplot2)
#import libraries all
#library(DMwR)
#importing brain dataset
data <- data.frame(read.csv("dataset.csv"))
#checking the structure of our dataset
str(data)
#since ID won't be useful during prediction so removing that
brainData <- select(data, -c('id'))
#checking top5 entries in our dataset
head(brainData)
summary(brainData)
#Converting gender,hypertension,heart_disease,ever_married,work_type,Residence_type,smoking_status,stroke to factors
brainData$gender = factor(brainData$gender)
brainData$hypertension = factor(brainData$hypertension)
brainData$heart_disease = factor(brainData$heart_disease)
brainData$ever_married = factor(brainData$ever_married)
brainData$work_type = factor(brainData$work_type)
brainData$Residence_type = factor(brainData$Residence_type)
brainData$smoking_status = factor(brainData$smoking_status)
brainData$stroke = factor(brainData$stroke)
str(brainData)
summary(brainData)
cleanData = brainData
cleanData[cleanData == ''] <- NA
nrow(cleanData)
cleanData <- subset(cleanData, !is.na(smoking_status))
nrow(cleanData)
ggplot(data=brainData, aes(bmi)) +
geom_histogram(col="black",
fill="blue") +
labs(x="bmi", y="frequency") +
labs(title="plot of bmi")
#removing missing values for BMI
cleanData$bmi[is.na(cleanData$bmi)] <- median(cleanData$bmi, na.rm = T) #replacing NA values with median of the remaining bmi values.
summary(cleanData)
ggplot(data=brainData, aes(bmi)) +
geom_histogram(col="black",
fill="blue") +
labs(x="bmi", y="frequency") +
labs(title="plot of bmi")
tempdf <- subset(brainData, !is.na(bmi))  # removing NA values from bmi and storing it in tempdf
density_bmi <- density(tempdf$bmi)
plot(density_bmi)
ggplot(data = tempdf, mapping = aes(y = bmi)) +
geom_boxplot() + geom_boxplot( colour="black", fill="#7777cc", outlier.colour="red", outlier.shape=8, outlier.size=2)
skewness(tempdf$bmi)
#install packages
#remotes::install_github("cran/DMwR")
#install.packages("moments")
#import libraries all
library(ggplot2)
library(moments)
library(dplyr)
#library(DMwR)
dim(cleanData)
quartiles_glucose <- quantile(cleanData$avg_glucose_level, probs=c(.25, .75), na.rm = FALSE)
IQR_glucose <- IQR(cleanData$avg_glucose_level)
Lower_glucose <- quartiles[1] - 1.5*IQR
Upper_glucose <- quartiles[2] + 1.5*IQR
#since all the missing values are for stroke =0 entries, we will directly drop it
cleanData <- subset(cleanData, cleanData$avg_glucose_level > Lower_glucose & cleanData$avg_glucose_level < Upper_glucose)
dim(cleanData)
dim(cleanData)
quartiles_glucose <- quantile(cleanData$avg_glucose_level, probs=c(.25, .75), na.rm = FALSE)
IQR_glucose <- IQR(cleanData$avg_glucose_level)
Lower_glucose <- quartiles_glucose[1] - 1.5*IQR
Upper_glucose <- quartiles_glucose[2] + 1.5*IQR
#since all the missing values are for stroke =0 entries, we will directly drop it
cleanData <- subset(cleanData, cleanData$avg_glucose_level > Lower_glucose & cleanData$avg_glucose_level < Upper_glucose)
dim(cleanData)
dim(cleanData)
quartiles_glucose <- quantile(cleanData$avg_glucose_level, probs=c(.25, .75), na.rm = FALSE)
IQR_glucose <- IQR(cleanData$avg_glucose_level)
Lower_glucose <- quartiles_glucose[1] - 1.5*IQR_glucose
Upper_glucose <- quartiles_glucose[2] + 1.5*IQR_glucose
#since all the missing values are for stroke =0 entries, we will directly drop it
cleanData <- subset(cleanData, cleanData$avg_glucose_level > Lower_glucose & cleanData$avg_glucose_level < Upper_glucose)
dim(cleanData)
table(cleanData$stroke)
#use SMOTE to create new dataset that is more balanced
cleanData <- SMOTE(stroke ~ ., cleanData, perc.over = 2000, perc.under = 200)
#minority => 2000/100 =20 so 20*(strok1Observations=416) #upsampling
#200/100 =2, make the majority observation 2 time the minority observations #downsampling
#view distribution of response variable in new dataset
table(cleanData$stroke)
#bmi
ggplot(data = cleanData, mapping = aes(x = work_type, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = Residence_type, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = ever_married, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = smoking_status, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = hypertension, y = bmi)) +
geom_boxplot()
#bmi
ggplot(data = cleanData, mapping = aes(x = stroke, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = work_type, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = Residence_type, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = ever_married, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = smoking_status, y = bmi)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = hypertension, y = bmi)) +
geom_boxplot()
#bmi
ggplot(data = cleanData, mapping = aes(x = stroke, y = bmi, fill=stroke)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = stroke, y = bmi, fill=stroke)) +
geom_boxplot()
ggplot(mapping = aes(x = stroke, y = bmi, fill = stroke, color = gender)) +
geom_boxplot() +
labs(title = "Boxplot of BMI",
x = "Stroke",
y = "BMI") +
scale_fill_brewer(palette = "Paired")
ggplot(data = cleanData, mapping = aes(x = stroke, y = bmi, fill=stroke)) +
geom_boxplot()
ggplot(data = cleanData, mapping = aes(x = stroke, y = bmi, fill = stroke, color = gender)) +
geom_boxplot() +
labs(title = "Boxplot of BMI",
x = "Stroke",
y = "BMI") +
scale_fill_brewer(palette = "Paired")
ggplot(data = cleanData, mapping = aes(x = stroke, y = bmi, fill = stroke, color = gender)) +
geom_boxplot() +
labs(title = "Boxplot of BMI",
x = "Stroke",
y = "BMI") +
scale_fill_brewer(palette = "Paired")
ggplot(data = cleanData, mapping = aes(x = stroke, y = bmi, fill=stroke)) +
geom_boxplot()
